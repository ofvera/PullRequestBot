"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/raw-body";
exports.ids = ["vendor-chunks/raw-body"];
exports.modules = {

/***/ "(rsc)/./node_modules/raw-body/index.js":
/*!****************************************!*\
  !*** ./node_modules/raw-body/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * raw-body\n * Copyright(c) 2013-2014 Jonathan Ong\n * Copyright(c) 2014-2022 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var asyncHooks = tryRequireAsyncHooks();\nvar bytes = __webpack_require__(/*! bytes */ \"(rsc)/./node_modules/bytes/index.js\");\nvar createError = __webpack_require__(/*! http-errors */ \"(rsc)/./node_modules/http-errors/index.js\");\nvar iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\nvar unpipe = __webpack_require__(/*! unpipe */ \"(rsc)/./node_modules/unpipe/index.js\");\n/**\n * Module exports.\n * @public\n */ module.exports = getRawBody;\n/**\n * Module variables.\n * @private\n */ var ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;\n/**\n * Get the decoder for a given encoding.\n *\n * @param {string} encoding\n * @private\n */ function getDecoder(encoding) {\n    if (!encoding) return null;\n    try {\n        return iconv.getDecoder(encoding);\n    } catch (e) {\n        // error getting decoder\n        if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message)) throw e;\n        // the encoding was not found\n        throw createError(415, \"specified encoding unsupported\", {\n            encoding: encoding,\n            type: \"encoding.unsupported\"\n        });\n    }\n}\n/**\n * Get the raw body of a stream (typically HTTP).\n *\n * @param {object} stream\n * @param {object|string|function} [options]\n * @param {function} [callback]\n * @public\n */ function getRawBody(stream, options, callback) {\n    var done = callback;\n    var opts = options || {};\n    // light validation\n    if (stream === undefined) {\n        throw new TypeError(\"argument stream is required\");\n    } else if (typeof stream !== \"object\" || stream === null || typeof stream.on !== \"function\") {\n        throw new TypeError(\"argument stream must be a stream\");\n    }\n    if (options === true || typeof options === \"string\") {\n        // short cut for encoding\n        opts = {\n            encoding: options\n        };\n    }\n    if (typeof options === \"function\") {\n        done = options;\n        opts = {};\n    }\n    // validate callback is a function, if provided\n    if (done !== undefined && typeof done !== \"function\") {\n        throw new TypeError(\"argument callback must be a function\");\n    }\n    // require the callback without promises\n    if (!done && !global.Promise) {\n        throw new TypeError(\"argument callback is required\");\n    }\n    // get encoding\n    var encoding = opts.encoding !== true ? opts.encoding : \"utf-8\";\n    // convert the limit to an integer\n    var limit = bytes.parse(opts.limit);\n    // convert the expected length to an integer\n    var length = opts.length != null && !isNaN(opts.length) ? parseInt(opts.length, 10) : null;\n    if (done) {\n        // classic callback style\n        return readStream(stream, encoding, length, limit, wrap(done));\n    }\n    return new Promise(function executor(resolve, reject) {\n        readStream(stream, encoding, length, limit, function onRead(err, buf) {\n            if (err) return reject(err);\n            resolve(buf);\n        });\n    });\n}\n/**\n * Halt a stream.\n *\n * @param {Object} stream\n * @private\n */ function halt(stream) {\n    // unpipe everything from the stream\n    unpipe(stream);\n    // pause stream\n    if (typeof stream.pause === \"function\") {\n        stream.pause();\n    }\n}\n/**\n * Read the data from the stream.\n *\n * @param {object} stream\n * @param {string} encoding\n * @param {number} length\n * @param {number} limit\n * @param {function} callback\n * @public\n */ function readStream(stream, encoding, length, limit, callback) {\n    var complete = false;\n    var sync = true;\n    // check the length and limit options.\n    // note: we intentionally leave the stream paused,\n    // so users should handle the stream themselves.\n    if (limit !== null && length !== null && length > limit) {\n        return done(createError(413, \"request entity too large\", {\n            expected: length,\n            length: length,\n            limit: limit,\n            type: \"entity.too.large\"\n        }));\n    }\n    // streams1: assert request encoding is buffer.\n    // streams2+: assert the stream encoding is buffer.\n    //   stream._decoder: streams1\n    //   state.encoding: streams2\n    //   state.decoder: streams2, specifically < 0.10.6\n    var state = stream._readableState;\n    if (stream._decoder || state && (state.encoding || state.decoder)) {\n        // developer error\n        return done(createError(500, \"stream encoding should not be set\", {\n            type: \"stream.encoding.set\"\n        }));\n    }\n    if (typeof stream.readable !== \"undefined\" && !stream.readable) {\n        return done(createError(500, \"stream is not readable\", {\n            type: \"stream.not.readable\"\n        }));\n    }\n    var received = 0;\n    var decoder;\n    try {\n        decoder = getDecoder(encoding);\n    } catch (err) {\n        return done(err);\n    }\n    var buffer = decoder ? \"\" : [];\n    // attach listeners\n    stream.on(\"aborted\", onAborted);\n    stream.on(\"close\", cleanup);\n    stream.on(\"data\", onData);\n    stream.on(\"end\", onEnd);\n    stream.on(\"error\", onEnd);\n    // mark sync section complete\n    sync = false;\n    function done() {\n        var args = new Array(arguments.length);\n        // copy arguments\n        for(var i = 0; i < args.length; i++){\n            args[i] = arguments[i];\n        }\n        // mark complete\n        complete = true;\n        if (sync) {\n            process.nextTick(invokeCallback);\n        } else {\n            invokeCallback();\n        }\n        function invokeCallback() {\n            cleanup();\n            if (args[0]) {\n                // halt the stream on error\n                halt(stream);\n            }\n            callback.apply(null, args);\n        }\n    }\n    function onAborted() {\n        if (complete) return;\n        done(createError(400, \"request aborted\", {\n            code: \"ECONNABORTED\",\n            expected: length,\n            length: length,\n            received: received,\n            type: \"request.aborted\"\n        }));\n    }\n    function onData(chunk) {\n        if (complete) return;\n        received += chunk.length;\n        if (limit !== null && received > limit) {\n            done(createError(413, \"request entity too large\", {\n                limit: limit,\n                received: received,\n                type: \"entity.too.large\"\n            }));\n        } else if (decoder) {\n            buffer += decoder.write(chunk);\n        } else {\n            buffer.push(chunk);\n        }\n    }\n    function onEnd(err) {\n        if (complete) return;\n        if (err) return done(err);\n        if (length !== null && received !== length) {\n            done(createError(400, \"request size did not match content length\", {\n                expected: length,\n                length: length,\n                received: received,\n                type: \"request.size.invalid\"\n            }));\n        } else {\n            var string = decoder ? buffer + (decoder.end() || \"\") : Buffer.concat(buffer);\n            done(null, string);\n        }\n    }\n    function cleanup() {\n        buffer = null;\n        stream.removeListener(\"aborted\", onAborted);\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"error\", onEnd);\n        stream.removeListener(\"close\", cleanup);\n    }\n}\n/**\n * Try to require async_hooks\n * @private\n */ function tryRequireAsyncHooks() {\n    try {\n        return __webpack_require__(/*! async_hooks */ \"async_hooks\");\n    } catch (e) {\n        return {};\n    }\n}\n/**\n * Wrap function with async resource, if possible.\n * AsyncResource.bind static method backported.\n * @private\n */ function wrap(fn) {\n    var res;\n    // create anonymous resource\n    if (asyncHooks.AsyncResource) {\n        res = new asyncHooks.AsyncResource(fn.name || \"bound-anonymous-fn\");\n    }\n    // incompatible node.js\n    if (!res || !res.runInAsyncScope) {\n        return fn;\n    }\n    // return bound function\n    return res.runInAsyncScope.bind(res, fn, null);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/raw-body/index.js\n");

/***/ })

};
;