"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bytes";
exports.ids = ["vendor-chunks/bytes"];
exports.modules = {

/***/ "(rsc)/./node_modules/bytes/index.js":
/*!*************************************!*\
  !*** ./node_modules/bytes/index.js ***!
  \*************************************/
/***/ ((module) => {

eval("/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n/**\n * Module variables.\n * @private\n */ var formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\nvar map = {\n    b: 1,\n    kb: 1 << 10,\n    mb: 1 << 20,\n    gb: 1 << 30,\n    tb: Math.pow(1024, 4),\n    pb: Math.pow(1024, 5)\n};\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */ function bytes(value, options) {\n    if (typeof value === \"string\") {\n        return parse(value);\n    }\n    if (typeof value === \"number\") {\n        return format(value, options);\n    }\n    return null;\n}\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */ function format(value, options) {\n    if (!Number.isFinite(value)) {\n        return null;\n    }\n    var mag = Math.abs(value);\n    var thousandsSeparator = options && options.thousandsSeparator || \"\";\n    var unitSeparator = options && options.unitSeparator || \"\";\n    var decimalPlaces = options && options.decimalPlaces !== undefined ? options.decimalPlaces : 2;\n    var fixedDecimals = Boolean(options && options.fixedDecimals);\n    var unit = options && options.unit || \"\";\n    if (!unit || !map[unit.toLowerCase()]) {\n        if (mag >= map.pb) {\n            unit = \"PB\";\n        } else if (mag >= map.tb) {\n            unit = \"TB\";\n        } else if (mag >= map.gb) {\n            unit = \"GB\";\n        } else if (mag >= map.mb) {\n            unit = \"MB\";\n        } else if (mag >= map.kb) {\n            unit = \"KB\";\n        } else {\n            unit = \"B\";\n        }\n    }\n    var val = value / map[unit.toLowerCase()];\n    var str = val.toFixed(decimalPlaces);\n    if (!fixedDecimals) {\n        str = str.replace(formatDecimalsRegExp, \"$1\");\n    }\n    if (thousandsSeparator) {\n        str = str.split(\".\").map(function(s, i) {\n            return i === 0 ? s.replace(formatThousandsRegExp, thousandsSeparator) : s;\n        }).join(\".\");\n    }\n    return str + unitSeparator + unit;\n}\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */ function parse(val) {\n    if (typeof val === \"number\" && !isNaN(val)) {\n        return val;\n    }\n    if (typeof val !== \"string\") {\n        return null;\n    }\n    // Test if the string passed is valid\n    var results = parseRegExp.exec(val);\n    var floatValue;\n    var unit = \"b\";\n    if (!results) {\n        // Nothing could be extracted from the given string\n        floatValue = parseInt(val, 10);\n        unit = \"b\";\n    } else {\n        // Retrieve the value and the unit\n        floatValue = parseFloat(results[1]);\n        unit = results[4].toLowerCase();\n    }\n    if (isNaN(floatValue)) {\n        return null;\n    }\n    return Math.floor(map[unit] * floatValue);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/bytes/index.js\n");

/***/ })

};
;