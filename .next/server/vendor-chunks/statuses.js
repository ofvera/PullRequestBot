"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/statuses";
exports.ids = ["vendor-chunks/statuses"];
exports.modules = {

/***/ "(rsc)/./node_modules/statuses/index.js":
/*!****************************************!*\
  !*** ./node_modules/statuses/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var codes = __webpack_require__(/*! ./codes.json */ \"(rsc)/./node_modules/statuses/codes.json\");\n/**\n * Module exports.\n * @public\n */ module.exports = status;\n// status code to message map\nstatus.message = codes;\n// status message (lower-case) to code map\nstatus.code = createMessageToStatusCodeMap(codes);\n// array of status codes\nstatus.codes = createStatusCodeList(codes);\n// status codes for redirects\nstatus.redirect = {\n    300: true,\n    301: true,\n    302: true,\n    303: true,\n    305: true,\n    307: true,\n    308: true\n};\n// status codes for empty bodies\nstatus.empty = {\n    204: true,\n    205: true,\n    304: true\n};\n// status codes for when you should retry the request\nstatus.retry = {\n    502: true,\n    503: true,\n    504: true\n};\n/**\n * Create a map of message to status code.\n * @private\n */ function createMessageToStatusCodeMap(codes) {\n    var map = {};\n    Object.keys(codes).forEach(function forEachCode(code) {\n        var message = codes[code];\n        var status = Number(code);\n        // populate map\n        map[message.toLowerCase()] = status;\n    });\n    return map;\n}\n/**\n * Create a list of all status codes.\n * @private\n */ function createStatusCodeList(codes) {\n    return Object.keys(codes).map(function mapCode(code) {\n        return Number(code);\n    });\n}\n/**\n * Get the status code for given message.\n * @private\n */ function getStatusCode(message) {\n    var msg = message.toLowerCase();\n    if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n        throw new Error('invalid status message: \"' + message + '\"');\n    }\n    return status.code[msg];\n}\n/**\n * Get the status message for given code.\n * @private\n */ function getStatusMessage(code) {\n    if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n        throw new Error(\"invalid status code: \" + code);\n    }\n    return status.message[code];\n}\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */ function status(code) {\n    if (typeof code === \"number\") {\n        return getStatusMessage(code);\n    }\n    if (typeof code !== \"string\") {\n        throw new TypeError(\"code must be a number or string\");\n    }\n    // '403'\n    var n = parseInt(code, 10);\n    if (!isNaN(n)) {\n        return getStatusMessage(n);\n    }\n    return getStatusCode(code);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RhdHVzZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRDtBQUVBOzs7Q0FHQyxHQUVELElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCOzs7Q0FHQyxHQUVEQyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLDZCQUE2QjtBQUM3QkEsT0FBT0MsT0FBTyxHQUFHTDtBQUVqQiwwQ0FBMEM7QUFDMUNJLE9BQU9FLElBQUksR0FBR0MsNkJBQTZCUDtBQUUzQyx3QkFBd0I7QUFDeEJJLE9BQU9KLEtBQUssR0FBR1EscUJBQXFCUjtBQUVwQyw2QkFBNkI7QUFDN0JJLE9BQU9LLFFBQVEsR0FBRztJQUNoQixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0FBQ1A7QUFFQSxnQ0FBZ0M7QUFDaENMLE9BQU9NLEtBQUssR0FBRztJQUNiLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztBQUNQO0FBRUEscURBQXFEO0FBQ3JETixPQUFPTyxLQUFLLEdBQUc7SUFDYixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7QUFDUDtBQUVBOzs7Q0FHQyxHQUVELFNBQVNKLDZCQUE4QlAsS0FBSztJQUMxQyxJQUFJWSxNQUFNLENBQUM7SUFFWEMsT0FBT0MsSUFBSSxDQUFDZCxPQUFPZSxPQUFPLENBQUMsU0FBU0MsWUFBYVYsSUFBSTtRQUNuRCxJQUFJRCxVQUFVTCxLQUFLLENBQUNNLEtBQUs7UUFDekIsSUFBSUYsU0FBU2EsT0FBT1g7UUFFcEIsZUFBZTtRQUNmTSxHQUFHLENBQUNQLFFBQVFhLFdBQVcsR0FBRyxHQUFHZDtJQUMvQjtJQUVBLE9BQU9RO0FBQ1Q7QUFFQTs7O0NBR0MsR0FFRCxTQUFTSixxQkFBc0JSLEtBQUs7SUFDbEMsT0FBT2EsT0FBT0MsSUFBSSxDQUFDZCxPQUFPWSxHQUFHLENBQUMsU0FBU08sUUFBU2IsSUFBSTtRQUNsRCxPQUFPVyxPQUFPWDtJQUNoQjtBQUNGO0FBRUE7OztDQUdDLEdBRUQsU0FBU2MsY0FBZWYsT0FBTztJQUM3QixJQUFJZ0IsTUFBTWhCLFFBQVFhLFdBQVc7SUFFN0IsSUFBSSxDQUFDTCxPQUFPUyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDcEIsT0FBT0UsSUFBSSxFQUFFZSxNQUFNO1FBQzNELE1BQU0sSUFBSUksTUFBTSw4QkFBOEJwQixVQUFVO0lBQzFEO0lBRUEsT0FBT0QsT0FBT0UsSUFBSSxDQUFDZSxJQUFJO0FBQ3pCO0FBRUE7OztDQUdDLEdBRUQsU0FBU0ssaUJBQWtCcEIsSUFBSTtJQUM3QixJQUFJLENBQUNPLE9BQU9TLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNwQixPQUFPQyxPQUFPLEVBQUVDLE9BQU87UUFDL0QsTUFBTSxJQUFJbUIsTUFBTSwwQkFBMEJuQjtJQUM1QztJQUVBLE9BQU9GLE9BQU9DLE9BQU8sQ0FBQ0MsS0FBSztBQUM3QjtBQUVBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUVELFNBQVNGLE9BQVFFLElBQUk7SUFDbkIsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDNUIsT0FBT29CLGlCQUFpQnBCO0lBQzFCO0lBRUEsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDNUIsTUFBTSxJQUFJcUIsVUFBVTtJQUN0QjtJQUVBLFFBQVE7SUFDUixJQUFJQyxJQUFJQyxTQUFTdkIsTUFBTTtJQUN2QixJQUFJLENBQUN3QixNQUFNRixJQUFJO1FBQ2IsT0FBT0YsaUJBQWlCRTtJQUMxQjtJQUVBLE9BQU9SLGNBQWNkO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHVsbHJlcXVlc3Rib3QvLi9ub2RlX21vZHVsZXMvc3RhdHVzZXMvaW5kZXguanM/MDZjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIHN0YXR1c2VzXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBKb25hdGhhbiBPbmdcbiAqIENvcHlyaWdodChjKSAyMDE2IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgY29kZXMgPSByZXF1aXJlKCcuL2NvZGVzLmpzb24nKVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gc3RhdHVzXG5cbi8vIHN0YXR1cyBjb2RlIHRvIG1lc3NhZ2UgbWFwXG5zdGF0dXMubWVzc2FnZSA9IGNvZGVzXG5cbi8vIHN0YXR1cyBtZXNzYWdlIChsb3dlci1jYXNlKSB0byBjb2RlIG1hcFxuc3RhdHVzLmNvZGUgPSBjcmVhdGVNZXNzYWdlVG9TdGF0dXNDb2RlTWFwKGNvZGVzKVxuXG4vLyBhcnJheSBvZiBzdGF0dXMgY29kZXNcbnN0YXR1cy5jb2RlcyA9IGNyZWF0ZVN0YXR1c0NvZGVMaXN0KGNvZGVzKVxuXG4vLyBzdGF0dXMgY29kZXMgZm9yIHJlZGlyZWN0c1xuc3RhdHVzLnJlZGlyZWN0ID0ge1xuICAzMDA6IHRydWUsXG4gIDMwMTogdHJ1ZSxcbiAgMzAyOiB0cnVlLFxuICAzMDM6IHRydWUsXG4gIDMwNTogdHJ1ZSxcbiAgMzA3OiB0cnVlLFxuICAzMDg6IHRydWVcbn1cblxuLy8gc3RhdHVzIGNvZGVzIGZvciBlbXB0eSBib2RpZXNcbnN0YXR1cy5lbXB0eSA9IHtcbiAgMjA0OiB0cnVlLFxuICAyMDU6IHRydWUsXG4gIDMwNDogdHJ1ZVxufVxuXG4vLyBzdGF0dXMgY29kZXMgZm9yIHdoZW4geW91IHNob3VsZCByZXRyeSB0aGUgcmVxdWVzdFxuc3RhdHVzLnJldHJ5ID0ge1xuICA1MDI6IHRydWUsXG4gIDUwMzogdHJ1ZSxcbiAgNTA0OiB0cnVlXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbWFwIG9mIG1lc3NhZ2UgdG8gc3RhdHVzIGNvZGUuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lc3NhZ2VUb1N0YXR1c0NvZGVNYXAgKGNvZGVzKSB7XG4gIHZhciBtYXAgPSB7fVxuXG4gIE9iamVjdC5rZXlzKGNvZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIGZvckVhY2hDb2RlIChjb2RlKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBjb2Rlc1tjb2RlXVxuICAgIHZhciBzdGF0dXMgPSBOdW1iZXIoY29kZSlcblxuICAgIC8vIHBvcHVsYXRlIG1hcFxuICAgIG1hcFttZXNzYWdlLnRvTG93ZXJDYXNlKCldID0gc3RhdHVzXG4gIH0pXG5cbiAgcmV0dXJuIG1hcFxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGxpc3Qgb2YgYWxsIHN0YXR1cyBjb2Rlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RhdHVzQ29kZUxpc3QgKGNvZGVzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhjb2RlcykubWFwKGZ1bmN0aW9uIG1hcENvZGUgKGNvZGUpIHtcbiAgICByZXR1cm4gTnVtYmVyKGNvZGUpXG4gIH0pXG59XG5cbi8qKlxuICogR2V0IHRoZSBzdGF0dXMgY29kZSBmb3IgZ2l2ZW4gbWVzc2FnZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3RhdHVzQ29kZSAobWVzc2FnZSkge1xuICB2YXIgbXNnID0gbWVzc2FnZS50b0xvd2VyQ2FzZSgpXG5cbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3RhdHVzLmNvZGUsIG1zZykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc3RhdHVzIG1lc3NhZ2U6IFwiJyArIG1lc3NhZ2UgKyAnXCInKVxuICB9XG5cbiAgcmV0dXJuIHN0YXR1cy5jb2RlW21zZ11cbn1cblxuLyoqXG4gKiBHZXQgdGhlIHN0YXR1cyBtZXNzYWdlIGZvciBnaXZlbiBjb2RlLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRTdGF0dXNNZXNzYWdlIChjb2RlKSB7XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0YXR1cy5tZXNzYWdlLCBjb2RlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzdGF0dXMgY29kZTogJyArIGNvZGUpXG4gIH1cblxuICByZXR1cm4gc3RhdHVzLm1lc3NhZ2VbY29kZV1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIHN0YXR1cyBjb2RlLlxuICpcbiAqIEdpdmVuIGEgbnVtYmVyLCB0aGlzIHdpbGwgdGhyb3cgaWYgaXQgaXMgbm90IGEga25vd24gc3RhdHVzXG4gKiBjb2RlLCBvdGhlcndpc2UgdGhlIGNvZGUgd2lsbCBiZSByZXR1cm5lZC4gR2l2ZW4gYSBzdHJpbmcsXG4gKiB0aGUgc3RyaW5nIHdpbGwgYmUgcGFyc2VkIGZvciBhIG51bWJlciBhbmQgcmV0dXJuIHRoZSBjb2RlXG4gKiBpZiB2YWxpZCwgb3RoZXJ3aXNlIHdpbGwgbG9va3VwIHRoZSBjb2RlIGFzc3VtaW5nIHRoaXMgaXNcbiAqIHRoZSBzdGF0dXMgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGNvZGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3RhdHVzIChjb2RlKSB7XG4gIGlmICh0eXBlb2YgY29kZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZ2V0U3RhdHVzTWVzc2FnZShjb2RlKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBjb2RlICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NvZGUgbXVzdCBiZSBhIG51bWJlciBvciBzdHJpbmcnKVxuICB9XG5cbiAgLy8gJzQwMydcbiAgdmFyIG4gPSBwYXJzZUludChjb2RlLCAxMClcbiAgaWYgKCFpc05hTihuKSkge1xuICAgIHJldHVybiBnZXRTdGF0dXNNZXNzYWdlKG4pXG4gIH1cblxuICByZXR1cm4gZ2V0U3RhdHVzQ29kZShjb2RlKVxufVxuIl0sIm5hbWVzIjpbImNvZGVzIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdGF0dXMiLCJtZXNzYWdlIiwiY29kZSIsImNyZWF0ZU1lc3NhZ2VUb1N0YXR1c0NvZGVNYXAiLCJjcmVhdGVTdGF0dXNDb2RlTGlzdCIsInJlZGlyZWN0IiwiZW1wdHkiLCJyZXRyeSIsIm1hcCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZm9yRWFjaENvZGUiLCJOdW1iZXIiLCJ0b0xvd2VyQ2FzZSIsIm1hcENvZGUiLCJnZXRTdGF0dXNDb2RlIiwibXNnIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiRXJyb3IiLCJnZXRTdGF0dXNNZXNzYWdlIiwiVHlwZUVycm9yIiwibiIsInBhcnNlSW50IiwiaXNOYU4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/statuses/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/statuses/codes.json":
/*!******************************************!*\
  !*** ./node_modules/statuses/codes.json ***!
  \******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"100":"Continue","101":"Switching Protocols","102":"Processing","103":"Early Hints","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I\'m a Teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Too Early","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"}');

/***/ })

};
;